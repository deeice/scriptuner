
# Settle issues with different shells
IZ2S=
wc="wc -l"
if [ -n "$BASH_VERSION" ] ; then
  echo "BASH= $BASH_VERSION"
  n=-n; c=
elif [ -n "$(busybox --help |grep authors)" ] ; then
  n=-n; c=
  echo "busybox=$(busybox --help |grep authors)"
else 
  # Check for old IZ2S busybox (before "many authors")
  IZ2S="IZ2S"
  echo "IZ2S"
  c=\\c; n=
  # Some IZ2S /bin/busybox apps (eg ls) do not pipe output.
  # SD card busybox apps are ok.
  # Use sed to count on jffs
  [ -z "$(busybox |grep ls)" ] && wc="sed -n $="

  #wc="/mnt/ffs/bin/sed -n $="  # DEBUG Delete Me
fi
[ -n "$IZ2S" ] && math() { expr $@ ; }
[ -z "$IZ2S" ] && math() { echo $(( $@ )) ; }

# keys
E=$(printf "\033")

C_D=$(printf "\004")
C_H=$(printf "\010")
C_L=$'\x0c'
TAB=$(printf "\011")
BS=$(printf "\177")
SP=" "
UP="${E}[A"
DN="${E}[B"
RT="${E}[C"
LF="${E}[D"
HM="${E}[1~"
IN="${E}[2~"
DL="${E}[3~"
EN="${E}[4~"
PU="${E}[5~"
PD="${E}[6~"
HOM="${E}OH"
END="${E}OF"
F1="${E}OP"
F2="${E}OQ"
F3="${E}OR"
F4="${E}OS"
F5="${E}[15"
F6="${E}[17"
F7="${E}[18"
F8="${E}[19"
NL='
'

# ANSI colors (darK,Red,Green,Yellow,Blue,Magenta,Cyan,White,Normal)
K="${E}[1;30m"
R="${E}[1;31m"
G="${E}[1;32m"
Y="${E}[1;33m"
B="${E}[1;34m"
M="${E}[1;35m"
C="${E}[1;36m"
W="${E}[1;37m"
N="${E}[0m"
BOLD="${E}[1m"
REV="${E}[7m"
ITAL="${E}[3m"
UNDR="${E}[4m"
BLNK="${E}[5m"

# Reverse Red
RR="${E}[7;31m"
WB="${E}[1;44;37m"
BW="${E}[0;47;34m"

DRAW="${E}(0"
TEXT="${E}(B"

# Signal handler for resizing, also executed when typing Ctrl+L
on_resize () {
  redraw=1
  reprint=1
  resize=1
}

# This function cleans up the environment on exiting.
on_exit () {
  # Restore signal handlers
  eval "$save_traps"

  # Restore terminal settings
  [ -n "$_STTY" ] && stty $_STTY
  
  clear
}

on_kill () {
  on_exit
  exit 0
}

# Determine the dimensions of the screen
get_dimensions () {
  S=
  [ -n "$(which stty)" ] && S=$(stty size)
  if [ -n "$S" ] ; then
    ROW=$(echo $S | cut -d " " -f 1)
    COL=$(echo $S | cut -d " " -f 2)
  else
    _K=
    echo $n "$E[s$E[999;999H$E[6n$E[u"
    read -sn6 -t1 S
    read -sn1 -t1 _K; S="$S$_K"; 
    [ -n "$_K" ] && { _K=""; read -sn1 -t1 _K; S="$S$_K"; }

    S="${S#*[}"
    COL="${S#*;}"
    COL="${COL%*R}"
    ROW="${S%;*}"
  fi
  HDR="$E[1;1H$E[K"
  FTR="$E[$ROW;1H$E[K"
  ROW="$(math $ROW - 2)" # skip rows at top, bottom
}

# NOTE: This struggles to keep up when auto key repeat happens on zipit.
# When it cannot keep up it prints ESC sequence keystrokes on top of the filenames.
# This is because the echo suppression is only active during the reads.
# Using stty -echo seems to be the only way to eliminate this behavior.
# So I can make a 2.5K fake stty program in C for that on systems without it.

get_key() # Works without stty but takes a sec for ESC key (not ESC sequence) 
{
  IFSBAK=$IFS ; IFS=
  read -sn1 _KEY
  case "$_KEY" in
    "$E") _K=; read -rsn2 -t1 _K; _KEY="$E$_K";
      case "$_K" in
	"[A"|"[B"|"[C"|"[D"|"") ;;
	"OP"|"OQ"|"OR"|"OS"|"OH"|"OF") ;;
	*) _K=; read -n1 -t1 _K; _KEY="$_KEY$_K" ;;
      esac
  ;;  "") _KEY="NL"
  ;;
  esac

  # On openwrt I need kbhit or somesuch to do event compression.
  if [ -n $_STTY ] ; then
    _K=$(dd count=3 2>/dev/null) # Eat one lump of excess chars but dont loop.
    if [ -n "$_K" ] ; then 
      [ "$_KEY" == "$DN" ] && _KEY="DN" # double UP or DN
      [ "$_KEY" == "$UP" ] && _KEY="UP"
    fi
  fi
  IFS=$IFSBAK ; IFSBAK=
}

# search sel list for a match
match () {
  match=
  IFSBAK=$IFS ; IFS="$NL"
  for line in $sel ; do
    if [ "${PWD}/$f" == "$line" ] ; then
      #echo "$line"
      match="$line"
      break
    fi
  done
  IFS=$IFSBAK ; IFSBAK=
}

# delete any match from sel list
remove () {
  IFSBAK=$IFS ; IFS="$NL"
  for line in $sel ; do
    [ ! "${PWD}/$f" == "$line" ] &&  echo "$line"
  done
  IFS=$IFSBAK ; IFSBAK=
}

act () {
  revsel=
  IFSBAK=$IFS ; IFS="$NL"
  for line in ${sel:-$PWD/$f}; do
    revsel="${line}${revsel:+$NL}$revsel"
  done
  [ -z "$action" ] && echo "" > /tmp/fsel.txt
  for f in $revsel ; do
    [ -z "$f" ] && return
    [ -d "$f" ] && f="$f*" #apply filter?
    [ -z "$action" ] && echo "$f" >> /tmp/fsel.txt
    eval ${action:-echo} \""$f"\"
  done
  IFS=$IFSBAK ; IFSBAK=
}
  
move () {
  local arg="$1"
  redraw=1

  #if $f is in sel list then redraw it red, else redraw normal
  match
  if [ -n "$match" ]; then
    echo $n "${R}${f}${N}$c"
  else
    echo $n "${f}$c"
  fi

  # Save the previous index and move cursor
  old_index="$index"
  cursor="$(math $cursor + $arg)"

  if [ "$cursor" -gt "$visible" ]; then
    # Cursor moved past the bottom of the list

    if [ "$visible" -ge "$total" ]; then
      # The list fits entirely on the screen.
      index=1
    else
      # The list doesn't fit on the screen.
      index="$(math $index + $cursor - 1)"
      if [ "$index" -gt "$total" ]; then
        # Cursor out of bounds. Put it at the very bottom.
        index="$max_index"
      else
        # Move the index down so the visible part of the list
        # also shows the cursor
        index="$(math $index + 1 - $visible)"
      fi
    fi

    # In any case, place the cursor on the last file.
    cursor="$max_cursor"
  fi

  if [ "$cursor" -lt 1 ]; then
    # Cursor is above the list, so scroll up.
    index="$(math $index + $cursor - 1)"
    cursor=1
  fi

  # The index should always be >0 and <$max_index
  [ "$index" -gt "$max_index" ] && index="$max_index"
  [ "$index" -lt 1 ] && index=1

  if [ "$index" != "$old_index" ]; then
    # Redraw if the index (and thus the visible files) has changed
    reprint=1

    # Jump a step when scrolling
    if [ "$index" -gt "$old_index" ]; then
      # Jump a step down
      step="$(math $max_index - $index)"
      [ "$step" -gt "$maxstep" ] && step="$maxstep"
      index="$(math $index + $step)"
      cursor="$(math $cursor - $step)"
    else
      # Jump a step up
      step="$(math $index - 1)"
      [ "$step" -gt "$maxstep" ] && step="$maxstep"
      index="$(math $index - $step)"
      cursor="$(math $cursor + $step)"
    fi
  fi

  # The index should always be >0 and <$max_index
  [ "$index" -gt "$max_index" ] && index="$max_index"
  [ "$index" -lt 1 ] && index=1
}

# Change the directory
movedir () {
  redraw=1
  reprint=1
  index=1
  cursor=1
  cd "$1"
  PWD="$(pwd)"
}

# The drawing function
draw () {
  # Erase the screen if necessary
  if [ -n "$reprint" ]; then
    clear
    # Get list of files (possibly filtered) and total
    ff=  # List dirs, then files
    for f in * ; do
      [ -d "$f" ] && ff=$ff${ff:+$NL}$f"/"
    done
    for f in $hidden $filter ; do
      [ -f "$f" ] && ff=$ff${ff:+$NL}$f
    done
    files="$ff"
    total=$(echo "$files" | $wc)

    # Determine the number of visible files
    visible="$ROW"
    [ "$total" -lt "$visible" ] && visible="$total"

    max_index="$(math $total - $visible + 1)"
    max_cursor="$visible"


    # Print the path and the list of files
    DIR=$(echo $n $PWD$c | tail -c$COL)
    echo $n "$FTR${B}$DIR$N$c"
    echo    "$HDR${WB}Make your selection.  Filter = [$filter]$N"
    # Reduce the list of files to whats actually on screen
    files=$(echo "$files" | tail -n +"$index" | head -n "$ROW" | sed 's/\(.\{'"$COL"'\}\).*/\1/;')

    # Must turn selected files red before drawing them.
    IFSBK=$IFS ; IFS="$NL"
    for f in $files ; do
      for line in $sel ; do
        if [ "${PWD}/$f" == "$line" ] ; then
	  f="${R}${f}${N}"
          break
        fi
      done
      echo "$f"
    done
    IFS=$IFSBK ; IFSBK=
  fi

  # Determine the current file
  f=$(echo "$files" | tail -n +"$cursor" | head -n 1)

  # Clear the gui flags
  redraw=
  reprint=
  resize=

  # Move the cursor to the requested position
  pos="${E}[$(math $cursor + 1);1H"

  # Draw $f REVERSED.  If $f in sel list make text red.
  match
  if [ -n "$match" ]; then
    echo $n "$pos${RR}${f}${N}$pos$c"
  else
    echo $n "$pos${REV}${f}${N}$pos$c"
  fi
}


# Initialize selection variables
PWD="$(pwd)"
sel=

# Initialize position variables
index=1   # the number of the topmost visible line
cursor=1  # the number of the selected file, relative to index (+1)
total=0   # total number of files in this directory
visible=0 # total visible on screen

# Init vars related to the GUI
on_resize
maxstep=6

# Initialize settings (need to pass in action and possibly a filter)
# hidden opt not needed.  Can be part of filter.
filter="*"
if [ -n "$2" ] && [ -f == "$1" ] ; then
  filter="$2"
  shift 2
fi
action="${@}"

save_traps="$(trap)"

# Set terminal to hide keystrokes and timeout reads at .1s
[ -n "$(which stty)" ] && { _STTY=`stty -g`; stty -echo -icanon time 1 min 0; }
  
# Set up signal handlers
[ -z "$IZ2S" ] && trap on_resize SIGWINCH
trap on_kill SIGINT

# The program loop that handles the input and draws the interface
while true; do
  # Redraw the interface if requested
  [ -n "$resize" ] && get_dimensions
  [ -n "$redraw" ] && draw

  get_key
  
  case "$_KEY" in
    "$DN")
      move 1;;
    "DN")
      move 2;;
    "$PD")
      move 10;;
    "$PU")
      move -10;;
    "$UP")
      move -1;;
    "UP")
      move -2;;
    "$EN" | "$END")
      move 99999;;
    "$HM" | "$HOM")
      move -99999;;
    "$LF")
      movedir ..;;
    "$RT" )
      [ -d "$f" ] && movedir "$f";;
    "$TAB" | "$SP")
      # If $f in $sel, remove it else add it.
      match
      if [ -n "$match" ]; then
	echo $n "$REV$f${N}$pos$c"
	sel="$(remove)"
      else
	echo $n "$RR$f$N$pos$c"
	sel="$PWD/$f$NL${sel}"
      fi;;
    $C_L | r ) 
      on_resize;;
    "$E" | q )
      on_exit
      break;;
    "NL" )
      on_exit
      act
      break;;
  esac

done


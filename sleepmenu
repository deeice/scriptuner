# Skip #!/bin/sh - Dash has issues with read options.  Bash, Ash are OK.

# Settle issues with different shells
IZ2S=""
if [ -n "$BASH_VERSION" ] ; then
  echo "BASH= $BASH_VERSION"
  n=-n; c=
elif [ -n "$(busybox --help |grep authors)" ] ; then
  n=-n; c=
  echo "busybox=$(busybox --help |grep authors)"
else 
  # Check for old IZ2S busybox (before "many authors")
  IZ2S="IZ2S"
  echo "IZ2S"
  c=\\c; n=
fi
[ -n "$IZ2S" ] && math() { expr $@ ; }
[ -z "$IZ2S" ] && math() { echo $(( $@ )) ; }

# keys
E=$(printf "\033")
NL='
'
# ANSI colors
N="$E[0m"
WB="$E[1;44;37m"
BW="$E[0;47;34m"

# Two charsets.
G0=$(printf "\017")
G1=$(printf "\016")

# openwrt zipit only seems to have graphic chars on charset G1
DRAW="$G1$E)0"
TEXT="$G0$E(B"

# $I and $J are global widget indices.

get_key() # Skips Space and NL, but works in ash without stty.
{
  read -rsn1 _KEY
  case "$_KEY" in
     "${E}") _K=""; read -n1 -t1 _K; _KEY="$E$_K"; 
	[ -n "_K" ] && { _K=""; read -n1 -t1 _K; _KEY="$_KEY$_K"; }
  ;; "") _KEY=" "
  ;;
  esac
}

STTY="$(which stty)"
if [ -n "$STTY" ] ; then
  STTY=$(stty -g)
  stty -echo
  S=$(stty size)
else
  S=
fi

##### Get screen size ######
if [ -n "$S" ] ; then
  ROW=$(echo $S | cut -d " " -f 1)
  COL=$(echo $S | cut -d " " -f 2)
else
  _K=""
  echo $n "$E[s$E[999;999H$E[6n$E[u"
  read -sn6 -t1 S
  read -sn1 -t1 _K; S="$S$_K"; 
  [ -n "$_K" ] && { _K=""; read -sn1 -t1 _K; S="$S$_K"; }

  S="${S#*[}"
  COL="${S#*;}"
  COL="${COL%*R}"
  ROW="${S%;*}"
fi

ShowTUI()
{
##### Get TUI screen offset ######
Y=$(math $ROW - 19)
X=$(math $COL - 45)
Y=$(math $Y / 2 + 1)
X=$(math $X / 2 + 1)

# Do TUI math up front since expr is slow.
x="${X}H"
Y1="$E[$(math $Y + 1);"; L1="$Y1$x"
Y2="$E[$(math $Y + 2);"; L2="$Y2$x"
Y3="$E[$(math $Y + 3);"; L3="$Y3$x"
Y4="$E[$(math $Y + 4);"; L4="$Y4$x"
Y5="$E[$(math $Y + 5);"; L5="$Y5$x"
Y6="$E[$(math $Y + 6);"; L6="$Y6$x"
Y7="$E[$(math $Y + 7);"; L7="$Y7$x"
Y8="$E[$(math $Y + 8);"; L8="$Y8$x"
Y9="$E[$(math $Y + 9);"; L9="$Y9$x"
Y10="$E[$(math $Y + 10);"; L10="$Y10$x"
Y11="$E[$(math $Y + 11);"; L11="$Y11$x"
Y12="$E[$(math $Y + 12);"; L12="$Y12$x"
Y13="$E[$(math $Y + 13);"; L13="$Y13$x"
Y14="$E[$(math $Y + 14);"; L14="$Y14$x"
Y15="$E[$(math $Y + 15);"; L15="$Y15$x"
Y16="$E[$(math $Y + 16);"; L16="$Y16$x"
Y17="$E[$(math $Y + 17);"; L17="$Y17$x"
Y18="$E[$(math $Y + 18);"; L18="$Y18$x"
Y19="$E[$(math $Y + 19);"; L19="$Y19$x"

X1="$(math $X + 1)H"
X2="$(math $X + 2)H"
X5="$(math $X + 5)H"
X20="$(math $X + 20)H"
X34="$(math $X + 34)H"

# Define TUI Widgets (Location, EraseStr, String)
# (no widget names, types, or lengths needed for simple menu)
######   Message strings  ######
S41="$(printf "%-41s")"
WA1="$Y2$X1";  WE1="$WA1$S41$WA1"
WA2="$Y3$X1";  WE2="$WA2$S41$WA2"
WA3="$Y4$X1";  WE3="$WA3$S41$WA3"
######   Menu Options  ######
WA4="$Y6$X2";   WE4="$WA4$S41$WA4";    WS4="5 Minutes"
WA5="$Y7$X2";   WE5="$WA5$S41$WA5";    WS5="10 Minutes"
WA6="$Y8$X2";   WE6="$WA6$S41$WA6";    WS6="20 Minutes"
WA7="$Y9$X2";   WE7="$WA7$S41$WA7";    WS7="30 minutes"
WA8="$Y10$X2";  WE8="$WA8$S41$WA8";    WS8="45 minutes"
WA9="$Y11$X2";  WE9="$WA9$S41$WA9";    WS9="1 Hour"
WA10="$Y12$X2"; WE10="$WA10$S41$WA10"; WS10="2 Hours"
WA11="$Y13$X2"; WE11="$WA11$S41$WA11"; WS11="3 Hours"
WA12="$Y14$X2"; WE12="$WA12$S41$WA12"; WS12="User defined"
#######  Buttons  #######
# Button text lengths must fit in the boxes laid out in DRAW mode.
WA20="$Y17$X5";  WE20="$WA20     $WA20";  WS20="Sleep"
WA21="$Y17$X20"; WE21="$WA21    $WA21";   WS21="Stop"
WA22="$Y17$X34"; WE22="$WA22      $WA22"; WS22="Cancel"

###################
echo $n "$E[2J$c"

# Must use UPPERCASE for any words in DRAW mode.  Or add labels later.
echo "$E[$Y;${X}H$WB$DRAW"
echo  "${L1}lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk"
echo  "${L2}x                                           x"
echo  "${L3}x                                           x"
echo  "${L4}x                                           x"
echo  "${L5}tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu"
echo  "${L6}x                                           x"
echo  "${L7}x                                           x"
echo  "${L8}x                                           x"
echo  "${L9}x                                           x"
echo "${L10}x                                           x"
echo "${L11}x                                           x"
echo "${L12}x                                           x"
echo "${L13}x                                           x"
echo "${L14}x                                           x"
echo "${L15}tqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqu"
echo "${L16}x  lqqqqqqqk      lqqqqqqqk     lqqqqqqqqk  x"
echo "${L17}x  x       x      x       x     x        x  x"
echo "${L18}x  mqqqqqqqj      mqqqqqqqj     mqqqqqqqqj  x"
echo "${L19}mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj"
echo $n "$TEXT$WB$c"
# 
# Done with DRAW mode.  Now we can use lower case.
#
echo "${WE1}         Radio Sleep/Shutoff Timer"
echo "${WE3}How long before the music stops?"

# Menu options.  Draw the selected text BW reverse text.
echo "$WE4$BW$WS4$WB"
echo "$WE5$WS5"
echo "$WE6$WS6"
echo "$WE7$WS7"
echo "$WE8$WS8"
echo "$WE9$WS9"
echo "$WE10$WS10"
echo "$WE11$WS11"
echo "$WE12$WS12"

# Draw selected button text BW reverse text.
echo "$WE20$BW$WS20$WB$WE21$WS21$WE22$WS22"
}

# Boolean/PushButton handler
button()
{
  eval STR=\$WS$J
  case $I in 
    20) echo "STR=\"$STR\"; break" ; return ;;
    21) echo "break" ; return ;; 
    22) echo "break" ; return ;; 
  esac
}

#######
ShowTUI

# Initial setup.  Start at 1st menu op and button.
J=4; I=20; x=5
eval STR=\$WS$I

# Run main dialog box until ESC
while :
do
# Draw button    
YX="$Y17$(math $X + $x)H"
echo $n "$BW$YX$STR$YX$c"
get_key
MV=0 # Handle widget traversal (UP,DN,TAB).
case $_KEY in
   " ") eval $(button)
;; ${NL}) eval $(button)
;; "${E}") STR="Cancel"; break
;; "${E}[A") MV=$J ; J=$(math $J - 1) #UP
;; "${E}[B") MV=$J ; J=$(math $J + 1) #DN
;; "${E}[C") MV=$I ; I=$(math $I + 1) #>>
;; "${E}[D") MV=$I ; I=$(math $I - 1) #<<
;;
esac

# Set x and y if traversing between widgets
if [ $MV -ne 0 ] ; then
  # Clear and restore old menu option before moving on.
  eval WE=\$WE$MV
  eval STR=\$WS$MV
  echo $n "$WB$WE$STR$BW$c"
  if [ $MV -lt 20 ] ; then # Switch Menu Option
    [ "$J" -lt 4 ] && J=4
    [ "$J" -gt 12 ] && J=12
    eval STR=\$WS$J
    echo $n "$E[$(math $Y + $J + 2);$X2$STR$c"
  fi
  # Get button
  [ "$I" -lt 20 ] && I=20
  [ "$I" -gt 22 ] && I=22
  [ "$I" -eq 20 ] && x=5
  [ "$I" -eq 21 ] && x=20
  [ "$I" -eq 22 ] && x=34
  eval STR=\$WS$I
fi
done

#######
# Go to top left (1,1), set normal text, fix tty
echo $n "$E[1;1H$N$c"
stty "$STTY"
stty sane
clear

#######
# Act on selection.
var=$(IFS=" " ; set -- $STR ; echo $1)

pidfile="/tmp/apps/sleeptimer"

if [ "$var" = "Stop" ]; then
  if [ -e "$pidfile" ]; then
    kill `cat "$pidfile"`
    rm "$pidfile"
    echo "Sleep timer stopped"
  else
    echo "Sleep timer not running"
  fi
  sleep 3
  exit 0
elif [ "$var" = "User" ] 2>/dev/null; then
  echo "How many minutes before the music stops?"
  read var
elif [ "$var" -lt 5 ] 2>/dev/null; then
  var=$(math $var * 60) # Convert hours to minutes
fi
if [ "$var" -eq "$var" ] 2>/dev/null; then
  deallocvt
  # Sleep, then run onStop
  openvt -- sleeptimer $var
  echo "Timer set for $var minutes"
else
  # Not a number or user cancelled
  echo "Invalid time or cancelled"
fi

sleep 3

